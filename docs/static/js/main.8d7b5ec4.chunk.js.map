{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","console","log","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAa,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,0BAAMC,SAfW,SAACC,GAGlBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAxBa,SAACP,GAEtBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,sDAGnBI,QAAQC,IAAIH,GAHO,SAIDI,MAAOJ,GAJN,cAIbK,EAJa,gBAKGA,EAAKC,OALR,uBAKXC,EALW,EAKXA,KAEFC,EAAMD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAXvB,kBAgBZQ,GAhBY,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOZ,EAAW,EAAXA,IAGlC,OACI,yBAAKgB,UAAW,4DAEZ,yBAAKA,UAAY,WAAYC,IAAOjB,EAAMkB,IAAON,IACjD,uBAAGI,UAAW,UAAd,IAA0BJ,KCDzBO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAQtB,ECTwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OAdAC,qBAAU,WAEN1B,EAASC,GACJ0B,MAAM,SAAAC,GACHvB,QAAQC,IAAIsB,GACZC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAACtB,IAEGuB,EDnByBM,CAAc7B,GAAjCe,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAkCrB,OACI,oCACI,gCAAOtB,EAAP,KAIEsB,GAAW,sCACb,yBAAKJ,UAAW,aAERH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIkB,IAAOlB,EAAIC,IACND,UEtBhBmB,EAnCI,WAIjB,MAAoC7C,mBAAS,CAAC,uBAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAUA,OAEI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQ+C,EAAWrB,KAAK,SAAAX,GAAQ,OAEpB,kBAAC,EAAD,CACI8B,IAAO9B,EACPA,SAAYA,U,MC3BxCiC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8d7b5ec4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory= ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState(''); //Poner el valo default en string vacío, de lo contrario será undefined\r\n\r\n    const handleInputValue = (e) => {\r\n        //console.log(e.target.value);\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        //Para prevenir el comportamiento por defecto del formulario\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n        //console.log(setCategories);\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats] );\r\n            setinputValue('');\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange= { handleInputValue }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=RH8CQJPE99UQycjj4mqw3MZ50ypY3XlE`;\r\n    console.log(url);\r\n    const resp= await fetch( url );\r\n    const { data }= await resp.json();\r\n\r\n    const gifs= data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    //console.log( id, title, url );\r\n    return (\r\n        <div className= 'card animate__animated animate__bounce animate__delay-2s'>\r\n            {/*{ title }*/}\r\n            <img className= {'card.img'} src= { url } alt= { title } />\r\n            <p className= 'card.p'> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","//rafc, es para que me muestre snippets\r\n//import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { getGifs } from '../helpers/GetGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import PropTypes from 'prop-types';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    //const [count, setCount] = useState(0);\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n    //Renombrando la data en la reestructuración\r\n    const { data:images, loading }= useFetchGifs( category );\r\n\r\n    \r\n    //Se ejecuta cuando el componente es reederizado por primera vez\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //     .then( imgs => setImages( imgs ))\r\n    // }, [ category ])\r\n\r\n    \r\n\r\n    //getGifs();\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <li> { category }</li>\r\n    //         <h3>{ count }</h3>\r\n    //         <button onClick= { () => { setCount( count + 1 ) }}></button>\r\n    //     </div>\r\n    // )\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <h3> { category }</h3>\r\n    //         <ol>\r\n    //             {\r\n    //                 images.map( ({ id, title }) => (\r\n    //                     <li key= { id }>{ title }</li>\r\n    //                 ))\r\n    //             }\r\n    //         </ol>            \r\n    //     </div>\r\n    // )\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            {/* Con el operador ternario ? se evaluan las dos condiciones */}\r\n            {/* loading ? <p>Loading</p> : <p>Data Charged</p>*/}\r\n            {/* Con el operador ternario && se evaluan la primer condición */}\r\n            { loading && <p>Loading</p> }\r\n            <div className= \"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key= { img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>            \r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//GifGrid.PropTypes = {\r\n//    category: PropTypes.string.isRequired\r\n//}\r\n","\r\n// La importación de react es a menos que se regrese JSX\r\n//import React from 'react'\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //setTimeout(() => {\r\n    //    setstate({\r\n    //        data: [1,2,3,4,5,6,7,8,9,0],\r\n    //        loading: false\r\n    //    })\r\n    //}, 3000);\r\n\r\n    useEffect(() => {\r\n       \r\n        getGifs( category )\r\n            .then( imgs => {\r\n                console.log(imgs);\r\n                setTimeout(() => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })                        \r\n                }, 3000);\r\n            });\r\n    }, [category])\r\n\r\n    return state;   //{ data: [], loading: true }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// Funcional components\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories= ['One Punch','Samurai X','Dragon Ball'];\r\n    //const [categories, setCategories] = useState(['One Punch','Samurai X','Dragon Ball']);\r\n    const [categories, setCategories] = useState(['Woody wood peacker']);\r\n\r\n\r\n    // const handleAdd = () => {        \r\n    //     //categories.push('Otro Héroe');\r\n    //     //console.log(categories);\r\n    //     //setCategories( [...categories, 'Otro Héroe'] );\r\n    //     setCategories( cats => [...cats, 'HunterXHunter'] );\r\n    // }\r\n\r\n    return (\r\n        //Fragment en su forma corta\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        //<li key= {category}>{category}</li>\r\n                        <GifGrid \r\n                            key= { category }\r\n                            category= { category } />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );    \r\n  }\r\n\r\n  export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}